CREATE DATABASE `restaurant_db`;

USE `restaurant_db`;

-- WAITERS
-- TABLES
-- PRODUCTS
-- CLIENTS
-- orders
-- orders_products
-- orders_clients





CREATE TABLE `waiters` (
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(50) NOT NULL,
    `last_name` VARCHAR(50) NOT NULL,
    `email` VARCHAR(50) NOT NULL,
    `phone` VARCHAR(50),
    `salary` DECIMAL(10,2)
);


CREATE TABLE `tables` (
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `floor` INT NOT NULL,
    `reserved` TINYINT(1),
    `capacity` INT NOT NULL
);

CREATE TABLE `products` (
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(30) NOT NULL UNIQUE,
    `type` VARCHAR(30) NOT NULL,
    `price` DECIMAL(10,2) NOT NULL
);

CREATE TABLE `clients` (
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(50) NOT NULL,
    `last_name` VARCHAR(50) NOT NULL,
    `birthdate` DATE NOT NULL,
    `card` VARCHAR(50),
    `review` TEXT
);


CREATE TABLE `orders` (
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `table_id` INT NOT NULL,
    `waiter_id` INT NOT NULL,
    `order_time` TIME,
    `payed_status` TINYINT(1),
	CONSTRAINT fk_orders_tables
    FOREIGN KEY(`table_id`)
    REFERENCES`tables`(`id`),
	CONSTRAINT fk_orders_waiters
    FOREIGN KEY(`waiter_id`)
    REFERENCES`waiters`(`id`)
);

CREATE TABLE `orders_products` (
	`order_id` INT,
    `product_id` INT,
	CONSTRAINT fk_orders_products_orders
    FOREIGN KEY(`order_id`)
    REFERENCES`orders`(`id`),
	CONSTRAINT fk_orders_products_products
    FOREIGN KEY(`product_id`)
    REFERENCES`products`(`id`)
);


CREATE TABLE `orders_clients` (
	`order_id` INT,
    `client_id` INT,
	CONSTRAINT fk_orders_clients_orders
    FOREIGN KEY(`order_id`)
    REFERENCES`orders`(`id`),
	CONSTRAINT fk_orders_clients_clients
    FOREIGN KEY(`client_id`)
    REFERENCES`clients`(`id`)
);


-- INSERT INTO BASED ON ANOTHER TABLE
INSERT INTO `products` (`name`, `type`, `price`)
SELECT ( CONCAT(`last_name`, ' ', 'specialty')), 
	   ("Cocktail"), 
	   (ROUND(`salary` * 0.01))
FROM `waiters`
WHERE `waiters`.`id` > 6;


-- С две думи това е функцията за ъпдейт спрямо друга таблица:
INSERT INTO `table1` (`row1`) (`row2`) (`row3`) -- Тук добавяме редовете от таблица 1 които по условие трябва да се променят
SELECT (`row1`) -- Тук добавяме релевантните клетки от таблица2 от които ще инсъртваме инфо
	   (`row2`)
       (`row3`)
FROM `table2`
WHERE `condition`;








-- Update   - Ъптейтваме `table_id` като го понижаваме с 1 за `id` между 12 и 23
UPDATE `orders`    
SET `table_id` = `table_id` - 1    
WHERE `id` BETWEEN '12' AND '23';



-- Update възможно е да имам задача за вложен селект в ъпдейт 
UPDATE `coaches`
SET `coach_level` = `coach_level` + 1
WHERE `id` IN (SELECT `coach_id` FROM `players_coaches`) 
AND first_name LIKE 'A%';




-- DELETE Използваме JOIN, за да свържем 2 таблици, проверяваме с IS NULL съответсващи записи
DELETE `w` FROM `waiters` as `w`
LEFT JOIN `orders` AS `o` 
ON `w`.`id` = `o`.`waiter_id`
WHERE `o`.`waiter_id` IS NULL


-- QUERYING


SELECT * FROM `clients`
ORDER BY `birthdate` desc;


SELECT `first_name`, `last_name`, `birthdate`, `review` FROM `clients`
WHERE `card` IS NULL
AND `birthdate` BETWEEN '1978-01-01' AND '1993-01-01'
ORDER BY `last_name` DESC, `id` ASC
LIMIT 5;

-- сливаме last_name + first_name + дължината на first_name + ресторант           и       връщаме обърнат стринга на email от 2рата стойност до 12тата
SELECT CONCAT(`last_name`,`first_name`, CHAR_LENGTH(`first_name`), 'Restaurant') AS `username`, REVERSE(SUBSTRING((`email`), 2, 12)) AS `password`
FROM `waiters`
WHERE `salary` is not null
ORDER BY `password` DESC;


-- Групираме 2 таблици с JOIN и изкарваме резултати спрямо тях и бройката на продуктите и използваме HAVING вместо WHERE.
SELECT `id`, `name`, COUNT(`p`.`id`) AS `count` FROM `products` as `p`
JOIN `orders_products` as `op`
ON `p`.`id` = `op`.`product_id`
GROUP BY `name`
HAVING `count` > 4
ORDER BY `count` DESC, `name` ASC;

-- Може да използваме NOT IN + SELECT Вместо JOIN за определена филтрация.
SELECT CONCAT(`first_name`, " ", `last_name`) AS `full_name`, CONCAT(REVERSE(`last_name`), CHAR_LENGTH(`last_name`), '@cast.com') as `email`, (2022 - YEAR(`birthdate`)) AS `age`, `height`
FROM `actors`
WHERE `id` NOT IN (SELECT `actor_id` FROM `movies_actors`)
ORDER BY `height` asc;



SELECT o.table_id, t.capacity, count(c.id) AS count_clients, 
CASE
WHEN t.capacity > count(c.id) THEN 'Free seats'
WHEN t.capacity = count(c.id) THEN 'Full'
WHEN t.capacity < count(c.id) THEN 'Extra seats'
END AS availability FROM clients c
INNER JOIN orders_clients oc ON oc.client_id = c.id
INNER JOIN orders o ON oc.order_id = o.id
INNER JOIN tables t ON t.id = o.table_id
WHERE floor = 1
GROUP BY o.table_id
ORDER BY table_id DESC

