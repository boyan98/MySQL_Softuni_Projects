 -- 1. Records Count;
 USE `gringotts`;
 
 Import the database and send the total count of records to Mr. Bodrog. Make sure nothing got lost.
 
 SELECT COUNT(`id`) as 'count' FROM `wizzard_deposits`;
 
 
 -- The MAX() function returns the largest value of the selected column.
 SELECT max(`magic_wand_size`) AS 'longest_magic_wand' FROM `wizzard_deposits`
 ORDER BY `magic_wand_size` DESC;
 
 -- The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.
 SELECT `deposit_group`, max(`magic_wand_size`) AS 'longest_magic_wand' FROM `wizzard_deposits`
 GROUP BY `deposit_group`
 ORDER BY `longest_magic_wand`, `deposit_group`;
 
-- The AVG() function returns the average value of the selected column.
SELECT `deposit_group`
FROM `wizzard_deposits`
GROUP BY `deposit_group`
ORDER BY avg(`magic_wand_size`)
LIMIT 1;

SELECT `deposit_group`, sum(`deposit_amount`) as 'total_sum'
FROM `wizzard_deposits`
GROUP BY `deposit_group`
ORDER BY `total_sum` ASC;



-- `magic_wand_creator` = 'Ollivander family'
SELECT `deposit_group`, sum(`deposit_amount`) as 'total_sum'
FROM `wizzard_deposits`
WHERE `magic_wand_creator` = 'Ollivander family'
GROUP BY `deposit_group`
ORDER BY `deposit_group` ASC;

-- The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.
SELECT `deposit_group`, sum(`deposit_amount`) as 'total_sum'
FROM `wizzard_deposits`
WHERE `magic_wand_creator` = 'Ollivander family'
GROUP BY `deposit_group`
HAVING `total_sum` < 150000
ORDER BY `total_sum` DESC;

SELECT `deposit_group`, `magic_wand_creator`, min(`deposit_charge`) as 'min_deposit_charge'
FROM `wizzard_deposits`
GROUP BY `deposit_group`, `magic_wand_creator`
ORDER BY `magic_wand_creator`, `deposit_group` ASC;

-- We use CASE functionality as it helps us to explain the different scenarios
SELECT (
	CASE 
    WHEN `age` BETWEEN 0 AND 10 THEN '[0-10]'
	WHEN `age` BETWEEN 11 AND 20 THEN '[11-20]'
    WHEN `age` BETWEEN 21 AND 30 THEN '[21-30]'
    WHEN `age` BETWEEN 31 AND 40 THEN '[31-40]'
    WHEN `age` BETWEEN 41 AND 50 THEN '[41-50]'
    WHEN `age` BETWEEN 51 AND 60 THEN '[51-60]'
    WHEN `age` >= 61 THEN '[61+]'
END) AS `age_group`, 
COUNT(`id`) as 'wizard_count' 
FROM `wizzard_deposits`
GROUP BY `age_group`
ORDER BY `age_group`;

SELECT LEFT(`first_name`, 1) AS `first_letter` 
FROM `wizzard_deposits`
WHERE `deposit_group` = 'Troll Chest'
GROUP BY`first_letter`
ORDER BY `first_letter` ASC;

-- We used GROUP due to the fact some of the rows are not appearing within the standard select
SELECT `deposit_group`, `is_deposit_expired`, avg(`deposit_interest`) as `average_interest`
FROM `wizzard_deposits`
WHERE `deposit_start_date` > '1985-01-01'
GROUP BY `deposit_group`, `is_deposit_expired`
ORDER BY `deposit_group` DESC;
