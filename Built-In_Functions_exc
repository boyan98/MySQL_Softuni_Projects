USE `soft_uni`;

-- 1. Extract names, which first_names are starting with 'sa'
SELECT `first_name`, `last_name` FROM `employees`
WHERE `first_name` LIKE 'sa%'
ORDER BY `employee_id` ASC;

-- 2. Find Names of All Employees by Last Name
SELECT `first_name`, `last_name` FROM `employees`
WHERE `last_name` LIKE '%ei%'
ORDER BY `employee_id` ASC;

-- 3. Find First Names of All Employees
SELECT `first_name` FROM `employees`
WHERE `department_id` IN(3, 10)
AND YEAR(`hire_date`) BETWEEN '1995' AND '2005'
ORDER BY `employee_id`;

-- 4. Find All Employees Except Engineers
SELECT `first_name`, `last_name` FROM `employees`
WHERE `job_title` NOT LIKE '%engineer%'
ORDER BY `employee_id`;

-- 5. Find Towns with Name Length
SELECT `name` from `towns`
WHERE length(`name`) = 5
OR length(`name`) = 6
ORDER BY `name` ASC;

-- 6. Find Towns Starting With
SELECT `town_id`, `name` FROM `towns`
WHERE `name` LIKE 'm%' 
OR `name` LIKE 'k%'
OR `name` LIKE 'b%'
OR `name` LIKE 'e%'
ORDER BY `name` asc;

-- 7. Find Towns Not Starting With
SELECT `town_id`, `name` FROM `towns`
WHERE `name` NOT LIKE 'R%'
AND `name` NOT LIKE 'B%'
AND `name` NOT LIKE 'D%' 
ORDER BY `name` ASC;

-- 8. Create View Employees Hired After 2000 Year and SELECT the view.
CREATE VIEW v_employees_hired_after_2000 AS
SELECT `first_name`, `last_name`
FROM `employees`
WHERE YEAR(`hire_date`) > 2000;

SELECT * FROM `v_employees_hired_after_2000`;

-- 9. Length of Last Name
SELECT `first_name`, `last_name` FROM `employees`
WHERE length(`last_name`) = 5;


-- Part II – Queries for Geography Database

USE `geography`;


-- 10. Countries Holding 'A' 3 or More Times
SELECT `country_name`, `iso_code` FROM `countries`
WHERE `country_name` LIKE '%a%a%a%'
ORDER BY `iso_code` ASC;

-- 11. Mix of Peak and River Names
SELECT 
    `peak_name`,
    `river_name`,
    CONCAT(LOWER(`peak_name`), SUBSTRING(LOWER(`river_name`),2)) AS mix -- using this to make app upperchars -> lower chars
FROM
    peaks,
    rivers
WHERE
    RIGHT(`peak_name`, 1) = LEFT(LOWER(`river_name`), 1) -- using this to make app upperchars -> lower chars
ORDER BY mix;

-- Part III – Queries for Diablo Database

USE `diablo`;

-- 12. Games from 2011 and 2012 Year
SELECT `name`, DATE_FORMAT(`start`, '%Y-%m-%d') as `start` FROM `games`
WHERE YEAR(`start`) BETWEEN 2011 AND 2012
ORDER BY `start`, `name` ASC
LIMIT 50;


-- 13. User Email Providers -> SUBSTRING_INDEX(`email`, '@', -1) This is the method which returns all chars after @.
SELECT `user_name`, SUBSTRING_INDEX(`email`, '@', -1) as `email_provider` FROM `users`
ORDER BY  `email_provider`, `user_name` asc;


-- 14. Get Users with IP Address Like Pattern
SELECT `user_name`, `ip_address` FROM `users`
WHERE `ip_address` LIKE '___.1%.%.___'
ORDER BY `user_name` ASC;

-- 15. Show All Games with Duration and Part of the Day
SELECT `name` as 'game',
(CASE
WHEN hour(`start`) < 12 THEN 'Morning'
WHEN hour(`start`) < 18 THEN 'Afternoon'
ELSE 'Evening'
END) 
AS 'Part of the Day',
(CASE
WHEN `duration` <= 3 THEN 'Extra Short'
WHEN `duration` <= 6 THEN 'Short'
WHEN `duration` <= 10 THEN 'Long'
ELSE 'Extra Long'
END) 
AS 'Duration'
FROM `games`;



-- Part IV – Date Functions Queries

USE `orders`;

-- 16. Orders Table

SELECT `product_name`, `order_date`,
adddate(`order_date`, interval 3 day) as pay_due, 
adddate(`order_date`, interval 1 month) as deliver_due
FROM `orders`;
